/*     */ package com.mchange.v2.c3p0.stmt;
/*     */ 
/*     */ import com.mchange.v2.coalesce.CoalesceChecker;
/*     */ import com.mchange.v2.coalesce.Coalescer;
/*     */ import com.mchange.v2.coalesce.CoalescerFactory;
/*     */ import java.lang.reflect.Method;
/*     */ import java.sql.Connection;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ final class ValueIdentityStatementCacheKey
/*     */   extends StatementCacheKey
/*     */ {
/*     */   static final Coalescer keyCoalescer;
/*  55 */   static ValueIdentityStatementCacheKey spare = new ValueIdentityStatementCacheKey();
/*     */   int cached_hash;
/*     */   
/*     */   static {
/*  59 */     CoalesceChecker cc = new CoalesceChecker()
/*     */       {
/*     */         public boolean checkCoalesce(Object a, Object b) {
/*  62 */           return StatementCacheKey.equals((StatementCacheKey)a, b);
/*     */         }
/*     */         public int coalesceHash(Object a) {
/*  65 */           return ((ValueIdentityStatementCacheKey)a).cached_hash;
/*     */         }
/*     */       };
/*     */     
/*  69 */     keyCoalescer = CoalescerFactory.createCoalescer(cc, true, false);
/*     */   }
/*     */   static StatementCacheKey _find(Connection pcon, Method stmtProducingMethod, Object[] args) {
/*     */     int result_set_type, result_set_concurrency, columnIndexes[];
/*     */     String[] columnNames;
/*     */     Integer autogeneratedKeys, resultSetHoldability;
/*  75 */     String stmtText = (String)args[0];
/*  76 */     boolean is_callable = stmtProducingMethod.getName().equals("prepareCall");
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/*  85 */     if (args.length == 1) {
/*     */       
/*  87 */       result_set_type = 1003;
/*  88 */       result_set_concurrency = 1007;
/*  89 */       columnIndexes = null;
/*  90 */       columnNames = null;
/*  91 */       autogeneratedKeys = null;
/*  92 */       resultSetHoldability = null;
/*     */     }
/*  94 */     else if (args.length == 2) {
/*     */       
/*  96 */       Class[] argTypes = stmtProducingMethod.getParameterTypes();
/*  97 */       if (argTypes[1].isArray())
/*     */       {
/*  99 */         Class<?> baseType = argTypes[1].getComponentType();
/* 100 */         if (baseType == int.class) {
/*     */           
/* 102 */           result_set_type = 1003;
/* 103 */           result_set_concurrency = 1007;
/* 104 */           columnIndexes = (int[])args[1];
/* 105 */           columnNames = null;
/* 106 */           autogeneratedKeys = null;
/* 107 */           resultSetHoldability = null;
/*     */         }
/* 109 */         else if (baseType == String.class) {
/*     */           
/* 111 */           result_set_type = 1003;
/* 112 */           result_set_concurrency = 1007;
/* 113 */           columnIndexes = null;
/* 114 */           columnNames = (String[])args[1];
/* 115 */           autogeneratedKeys = null;
/* 116 */           resultSetHoldability = null;
/*     */         } else {
/*     */           
/* 119 */           throw new IllegalArgumentException("c3p0 probably needs to be updated for some new JDBC spec! As of JDBC3, we expect two arg statement producing methods where the second arg is either an int, int array, or String array.");
/*     */         
/*     */         }
/*     */       
/*     */       }
/*     */       else
/*     */       {
/* 126 */         result_set_type = 1003;
/* 127 */         result_set_concurrency = 1007;
/* 128 */         columnIndexes = null;
/* 129 */         columnNames = null;
/* 130 */         autogeneratedKeys = (Integer)args[1];
/* 131 */         resultSetHoldability = null;
/*     */       }
/*     */     
/* 134 */     } else if (args.length == 3) {
/*     */       
/* 136 */       result_set_type = ((Integer)args[1]).intValue();
/* 137 */       result_set_concurrency = ((Integer)args[2]).intValue();
/* 138 */       columnIndexes = null;
/* 139 */       columnNames = null;
/* 140 */       autogeneratedKeys = null;
/* 141 */       resultSetHoldability = null;
/*     */     }
/* 143 */     else if (args.length == 4) {
/*     */       
/* 145 */       result_set_type = ((Integer)args[1]).intValue();
/* 146 */       result_set_concurrency = ((Integer)args[2]).intValue();
/* 147 */       columnIndexes = null;
/* 148 */       columnNames = null;
/* 149 */       autogeneratedKeys = null;
/* 150 */       resultSetHoldability = (Integer)args[3];
/*     */     } else {
/*     */       
/* 153 */       throw new IllegalArgumentException("Unexpected number of args to " + stmtProducingMethod.getName());
/*     */     } 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 162 */     spare.init(pcon, stmtText, is_callable, result_set_type, result_set_concurrency, columnIndexes, columnNames, autogeneratedKeys, resultSetHoldability);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 172 */     StatementCacheKey out = (StatementCacheKey)keyCoalescer.coalesce(spare);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 178 */     if (out == spare)
/* 179 */       spare = new ValueIdentityStatementCacheKey(); 
/* 180 */     return out;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   void init(Connection physicalConnection, String stmtText, boolean is_callable, int result_set_type, int result_set_concurrency, int[] columnIndexes, String[] columnNames, Integer autogeneratedKeys, Integer resultSetHoldability) {
/* 193 */     super.init(physicalConnection, stmtText, is_callable, result_set_type, result_set_concurrency, columnIndexes, columnNames, autogeneratedKeys, resultSetHoldability);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 202 */     this.cached_hash = StatementCacheKey.hashCode(this);
/*     */   }
/*     */ }


/* Location:              /Users/bacnam/Projects/TieuLongProject/gameserver/gameServer.jar!/com/mchange/v2/c3p0/stmt/ValueIdentityStatementCacheKey.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */