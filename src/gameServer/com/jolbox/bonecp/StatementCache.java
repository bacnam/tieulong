/*     */ package com.jolbox.bonecp;
/*     */ 
/*     */ import com.google.common.collect.MapMaker;
/*     */ import java.sql.SQLException;
/*     */ import java.util.concurrent.ConcurrentMap;
/*     */ import org.slf4j.Logger;
/*     */ import org.slf4j.LoggerFactory;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class StatementCache
/*     */   implements IStatementCache
/*     */ {
/*  34 */   private static Logger logger = LoggerFactory.getLogger(StatementCache.class);
/*     */ 
/*     */ 
/*     */   
/*     */   private ConcurrentMap<String, StatementHandle> cache;
/*     */ 
/*     */   
/*     */   private int cacheSize;
/*     */ 
/*     */   
/*     */   private final boolean maintainStats;
/*     */ 
/*     */   
/*     */   private final Statistics statistics;
/*     */ 
/*     */ 
/*     */   
/*     */   public StatementCache(int size, boolean maintainStats, Statistics statistics) {
/*  52 */     this.maintainStats = maintainStats;
/*  53 */     this.statistics = statistics;
/*  54 */     this.cache = (new MapMaker()).concurrencyLevel(32).makeMap();
/*     */ 
/*     */ 
/*     */     
/*  58 */     this.cacheSize = size;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
/*  69 */     StringBuilder tmp = calculateCacheKeyInternal(sql, resultSetType, resultSetConcurrency);
/*     */ 
/*     */     
/*  72 */     tmp.append(", H:");
/*  73 */     tmp.append(resultSetHoldability);
/*     */     
/*  75 */     return tmp.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency) {
/*  85 */     StringBuilder tmp = calculateCacheKeyInternal(sql, resultSetType, resultSetConcurrency);
/*     */ 
/*     */     
/*  88 */     return tmp.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private StringBuilder calculateCacheKeyInternal(String sql, int resultSetType, int resultSetConcurrency) {
/*  99 */     StringBuilder tmp = new StringBuilder(sql.length() + 20);
/* 100 */     tmp.append(sql);
/*     */     
/* 102 */     tmp.append(", T");
/* 103 */     tmp.append(resultSetType);
/* 104 */     tmp.append(", C");
/* 105 */     tmp.append(resultSetConcurrency);
/* 106 */     return tmp;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String calculateCacheKey(String sql, int autoGeneratedKeys) {
/* 116 */     StringBuilder tmp = new StringBuilder(sql.length() + 4);
/* 117 */     tmp.append(sql);
/* 118 */     tmp.append(autoGeneratedKeys);
/* 119 */     return tmp.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String calculateCacheKey(String sql, int[] columnIndexes) {
/* 128 */     StringBuilder tmp = new StringBuilder(sql.length() + 4);
/* 129 */     tmp.append(sql);
/* 130 */     for (int i = 0; i < columnIndexes.length; i++) {
/* 131 */       tmp.append(columnIndexes[i]);
/* 132 */       tmp.append("CI,");
/*     */     } 
/* 134 */     return tmp.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public String calculateCacheKey(String sql, String[] columnNames) {
/* 143 */     StringBuilder tmp = new StringBuilder(sql.length() + 4);
/* 144 */     tmp.append(sql);
/* 145 */     for (int i = 0; i < columnNames.length; i++) {
/* 146 */       tmp.append(columnNames[i]);
/* 147 */       tmp.append("CN,");
/*     */     } 
/* 149 */     return tmp.toString();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public StatementHandle get(String key) {
/* 160 */     StatementHandle statement = this.cache.get(key);
/*     */     
/* 162 */     if (statement != null && (statement.isEnqueuedForClosure() || !statement.logicallyClosed.compareAndSet(true, false))) {
/* 163 */       statement = null;
/*     */     }
/*     */     
/* 166 */     if (this.maintainStats) {
/* 167 */       if (statement != null) {
/* 168 */         this.statistics.incrementCacheHits();
/*     */       } else {
/* 170 */         this.statistics.incrementCacheMiss();
/*     */       } 
/*     */     }
/* 173 */     return statement;
/*     */   }
/*     */ 
/*     */   
/*     */   public StatementHandle get(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
/* 178 */     return get(calculateCacheKey(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public StatementHandle get(String sql, int resultSetType, int resultSetConcurrency) {
/* 184 */     return get(calculateCacheKey(sql, resultSetType, resultSetConcurrency));
/*     */   }
/*     */ 
/*     */   
/*     */   public StatementHandle get(String sql, int autoGeneratedKeys) {
/* 189 */     return get(calculateCacheKey(sql, autoGeneratedKeys));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public StatementHandle get(String sql, int[] columnIndexes) {
/* 195 */     return get(calculateCacheKey(sql, columnIndexes));
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public StatementHandle get(String sql, String[] columnNames) {
/* 201 */     return get(calculateCacheKey(sql, columnNames));
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public int size() {
/* 213 */     return this.cache.size();
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public void clear() {
/* 225 */     for (StatementHandle statement : this.cache.values()) {
/*     */       try {
/* 227 */         if (!statement.isClosed() && !statement.isEnqueuedForClosure()) {
/* 228 */           statement.close();
/*     */         }
/* 230 */       } catch (SQLException e) {}
/*     */     } 
/*     */ 
/*     */ 
/*     */     
/* 235 */     this.cache.clear();
/*     */   }
/*     */ 
/*     */   
/*     */   public void checkForProperClosure() {
/* 240 */     for (StatementHandle statement : this.cache.values()) {
/* 241 */       if (!statement.isClosedOrEnqueuedForClosure()) {
/* 242 */         logger.error(statement.isClosed() + " " + statement.isEnqueuedForClosure() + "Statement not closed properly in application\n\n" + statement.getOpenStackTrace());
/*     */       }
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public void putIfAbsent(String key, StatementHandle handle) {
/* 249 */     if (this.cache.size() <= this.cacheSize && key != null && 
/* 250 */       this.cache.putIfAbsent(key, handle) == null) {
/* 251 */       handle.inCache = true;
/* 252 */       if (this.maintainStats)
/* 253 */         this.statistics.incrementStatementsCached(); 
/*     */     } 
/*     */   }
/*     */ }


/* Location:              /Users/bacnam/Projects/TieuLongProject/gameserver/gameServer.jar!/com/jolbox/bonecp/StatementCache.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */